"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTriadaTrades = exports.formatNomuraEBlot = exports.uploadVconAndReturnFilePath = exports.renderVcon = void 0;
require("dotenv").config();
const portfolioFunctions_1 = require("./portfolioFunctions");
const common_1 = require("./common");
const xlsx = require("xlsx");
const { PassThrough } = require('stream');
const { MongoClient, ServerApiVersion } = require('mongodb');
const uri = "mongodb+srv://alaa:" + process.env.MONGODBPASSWORD + "@atlascluster.zpfpywq.mongodb.net/?retryWrites=true&w=majority";
const client = new MongoClient(uri, {
    serverApi: {
        version: ServerApiVersion.v1,
        strict: false,
        deprecationErrors: true,
    }
});
function extractValues(lines) {
    let variables = [
        "Broker Code",
        "Status",
        "Buy/Sell",
        "Quantity",
        "Issue",
        "Benchmark",
        "Price",
        "Yield",
        "Principal",
        "Trade Date",
        "Acc Int",
        "Settle Date",
        "Net",
        "Spread",
        "Entry Time",
        "Customer",
        "Seq No",
        "Account",
        "User Name",
        "Audit Trail",
        "Broker Name",
        "Accrued Interest",
        "Application",
        "Benchmark Discount",
        "Benchmark Price",
        "Benchmark Yield",
        "Client Side",
        "Currency Symbol",
        "Cusip",
        "Dealer Notes",
        "Dealer Pricing Number",
        "Discount Rate",
        "End Date",
        "Factor Label", "Futures client broker", "Futures dealer broker", "ISIN", "Price (Decimal)", "Primary Security ID", "Rate", "Swap Sequence Number", "Trading System Ticket #", "Transaction Cost", "Unit Traded"
    ];
    // Prepare the variable pattern, escape special characters
    const varPattern = variables.map((v) => v.trim().replace(/[.*+\?^{}()|[\]\\]/g, '\\&')).join('|');
    let values = {};
    lines.forEach((line) => {
        var _a;
        // Split the line into segments based on the variable names
        const segments = line.split(new RegExp(`(${varPattern})`));
        for (let i = 1; i < segments.length; i += 2) {
            let varName = segments[i].trim();
            let value = '';
            if (i + 1 < segments.length) {
                // Slice the value from the segment, remove leading ':'
                value = ((_a = segments[i + 1].split(':')[1]) === null || _a === void 0 ? void 0 : _a.trim()) || '';
                // console.log(value)
            }
            // console.log(varName, value)
            values[varName] = value;
        }
    });
    return values;
}
function parseArray(arr) {
    let obj = {};
    for (let i = 0; i < arr.length; i++) {
        let splitString = arr[i].split(':');
        if (splitString.length === 2) {
            let key = splitString[0].trim();
            let value = splitString[1].trim();
            obj[key] = value;
        }
    }
    return obj;
}
function renderVcon(emailContent) {
    const start = 'Broker Code';
    const end = '** TICKET GENERATED BY BLOOMBERG **';
    // Find the start and end indices of the relevant content
    const startIndex = emailContent.indexOf(start);
    const endIndex = emailContent.indexOf(end) + end.length;
    // Extract the relevant content
    const relevantContent = emailContent.slice(startIndex, endIndex);
    let lines = relevantContent.split('\n');
    lines.pop();
    lines.pop();
    lines.pop();
    lines = lines.filter(line => line !== '------------------------------------------------------------------------------');
    lines = lines.filter(line => line !== '');
    let vcon = {};
    let main = lines.slice(0, 10);
    let secondary = lines.slice(11, -1);
    // console.log(secondary)
    let firstParams = extractValues(main);
    let secondParams = parseArray(secondary);
    vcon = { ...firstParams, ...secondParams };
    return vcon;
}
exports.renderVcon = renderVcon;
async function uploadVconAndReturnFilePath(vcons, pathName) {
    let binaryWS = xlsx.utils.json_to_sheet(vcons);
    // Create a new Workbook
    var wb = xlsx.utils.book_new();
    // Name your sheet
    xlsx.utils.book_append_sheet(wb, binaryWS, 'Binary values');
    // export your excel
    const stream = new PassThrough();
    const buffer = xlsx.write(wb, { type: 'buffer', bookType: 'xlsx' });
    let fileName = `after-excel/${pathName}_${new Date().getTime()}_output.xlsx`;
    (0, portfolioFunctions_1.uploadToGCloudBucket)(buffer, process.env.BUCKET, fileName)
        .then()
        .catch(console.error);
    return fileName;
}
exports.uploadVconAndReturnFilePath = uploadVconAndReturnFilePath;
function formatNomuraEBlot(vcons) {
    let nomuraEBlot = [];
    for (let index = 0; index < vcons.length; index++) {
        let vcon = vcons[index];
        let tradeDateFormated = (0, common_1.formateDateNomura)(vcon["Trade Date"]);
        let settlementDateFormated = (0, common_1.getSettlementDateYearNomura)(vcon["Trade Date"], vcon["Settle Date"]);
        let object = {};
        object["Transaction-Type-Indicator"] = "BS";
        object["Client-Ref"] = "";
        object["Shaped-Trade-Ref"] = "";
        object["Account-Number"] = "CPB10728";
        object["Trade-Version"] = "NEW";
        object["Trade-Date"] = tradeDateFormated;
        object["Settlement-Date"] = settlementDateFormated;
        object["BS-Indicator"] = vcon["Buy/Sell"];
        object["Security-Indicator-Type"] = "IS";
        object["Security-Val"] = vcon["ISIN"];
        object["Security-Description"] = vcon["Issue"];
        object["Issue-Currency"] = vcon["Application"];
        object["Broker"] = vcon["Broker Name"];
        object["Quantity"] = parseInt(vcon["Quantity"].replace(/,/g, ''));
        object["Price"] = vcon["Price (Decimal)"];
        object["Commission-Type"];
        object["Commission-Value"] = "0";
        object["Tax	Proceeds"];
        object["Proceeds-Currency"];
        object["Interest"] = vcon["Accrued Interest"];
        object["Prefigured-Indicator"];
        nomuraEBlot.push(object);
    }
    return nomuraEBlot;
}
exports.formatNomuraEBlot = formatNomuraEBlot;
async function getTriadaTrades(tradeType) {
    const database = client.db("trades");
    const reportCollection = await database.collection(`${tradeType}`).find().toArray();
    return reportCollection;
}
exports.getTriadaTrades = getTriadaTrades;
