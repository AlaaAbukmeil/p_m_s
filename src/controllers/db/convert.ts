import { PositionInDB, PositionInSQLDB } from "../../models/portfolio";
import { CentralizedTrade, CentralizedTradeInDB } from "../../models/trades";
const { v4: uuidv4 } = require("uuid");

export function convertTradesSQLToCentralized(trades: CentralizedTradeInDB[], tradeAppStatus: string): CentralizedTrade[] {
  let copy: CentralizedTrade[] = trades.map((trade) => ({
    "B/S": trade.b_s,
    "BB Ticker": trade.bb_ticker,
    Location: trade.location,
    "Trade Date": trade.trade_date,
    "Trade Time": trade.trade_time,
    "Settle Date": trade.settle_date,
    Price: trade.price,
    "Notional Amount": trade.notional_amount,
    "Settlement Amount": trade.settlement_amount,
    Principal: trade.principal,
    "Counter Party": trade.counter_party,
    "Triada Trade Id": trade.triada_trade_id,
    "Seq No": trade.seq_no,
    ISIN: trade.isin,
    Cuisp: trade.cuisp,
    Currency: trade.currency,
    Yield: trade.yield,
    "Accrued Interest": trade.accrued_interest,
    "Original Face": trade.original_face,
    "Comm/Fee": trade.comm_fee,
    "Trade Type": trade.trade_type,
    "Updated Notional": trade.updated_notional ? trade.updated_notional : null,
    timestamp: trade.timestamp,
    "Nomura Upload Status": trade.nomura_upload_status,
    "Last Nomura Generated": trade.last_nomura_generated,
    "Broker Full Name & Account": trade.broker_full_name_account,
    "Broker Email": trade.broker_email,
    "Settlement Venue": trade.settlement_venue,
    "Primary (True/False)": trade.primary_market ? "True" : "False",
    "Broker Email Status": trade.broker_email_status,
    "App Check Test": trade.front_office_check ? "Validated" : "",
    "Portfolio ID": trade.portfolio_id,
    "Front Office Check": false,
    "Trade App Status": tradeAppStatus,
    "Front Office Note": trade.front_office_note,
    Resolved: trade.resolved,
    Id: trade.id,
  }));
  return copy;
}
export function convertCentralizedToTradesSQL(centralizedTrades: CentralizedTrade[]): CentralizedTradeInDB[] {
  const safeString = (value: any) => (typeof value === "string" || typeof value === "number" ? value.toString() : "");
  const safeNumber = (value: any) => (typeof value === "number" || parseFloat(value) ? parseFloat(value) : 0);

  let copy: CentralizedTradeInDB[] = centralizedTrades.map((trade) => {
    let id = uuidv4();
    return {
      b_s: safeString(trade["B/S"]),
      bb_ticker: safeString(trade["BB Ticker"]),
      location: safeString(trade.Location),
      trade_date: safeString(trade["Trade Date"]),
      trade_time: safeString(trade["Trade Time"]),
      settle_date: safeString(trade["Settle Date"]),
      price: safeNumber(trade.Price),
      notional_amount: safeNumber(trade["Notional Amount"]),
      settlement_amount: safeNumber(trade["Settlement Amount"]),
      principal: safeNumber(trade.Principal),
      counter_party: safeString(trade["Counter Party"]),
      triada_trade_id: safeString(trade["Triada Trade Id"]),
      seq_no: safeString(trade["Seq No"]),
      isin: safeString(trade.ISIN),
      cuisp: safeString(trade.Cuisp),
      currency: safeString(trade.Currency),
      yield: safeString(trade.Yield),
      accrued_interest: safeNumber(trade["Accrued Interest"]),
      original_face: safeNumber(trade["Original Face"]),
      comm_fee: safeNumber(trade["Comm/Fee"]),
      trade_type: safeString(trade["Trade Type"]),
      updated_notional: safeNumber(trade["Updated Notional"]) || null,
      timestamp: safeNumber(trade.timestamp),
      nomura_upload_status: safeString(trade["Nomura Upload Status"]),
      last_nomura_generated: safeString(trade["Last Nomura Generated"]),
      broker_full_name_account: safeString(trade["Broker Full Name & Account"]),
      broker_email: safeString(trade["Broker Email"]),
      settlement_venue: safeString(trade["Settlement Venue"]),
      primary_market: trade["Primary (True/False)"] === "True",
      broker_email_status: safeString(trade["Broker Email Status"]),
      front_office_check: trade["Front Office Check"],
      portfolio_id: "portfolio_main",
      resolved: trade.Resolved,
      id: trade.Id || id,
      front_office_note: trade["Front Office Note"] || "",
    };
  });
  return copy;
}
export function formatPositionsTOSQL(positions: PositionInDB[]) {
  let newResult: PositionInSQLDB[] = positions.map((pos) => {
    let id = uuidv4();

    // Helper function to ensure type safety
    const safeString = (value: any) => (typeof value === "string" || typeof value === "number" ? value.toString() : "");
    const safeNumber = (value: any) => (typeof value === "number" || parseFloat(value) ? parseFloat(value) : 0);
    return {
      id: id,
      portfolio_id: "portfolio_main",
      portfolio_snapshot_time: safeString(pos["portfolio_snapshot_time"]),
      location: safeString(pos.Location),
      isin: safeString(pos.ISIN),
      cusip: safeString(pos.CUSIP),
      bloomberg_id: safeString(pos["Bloomberg ID"]),
      bid: safeNumber(pos.Bid),
      mid: safeNumber(pos.Mid),
      ask: safeNumber(pos.Ask),
      bloomberg_mid_bgn: safeNumber(pos["Bloomberg Mid BGN"]),
      notional_amount: safeNumber(pos["Notional Amount"]),
      average_cost: safeNumber(pos["Average Cost"]),
      bb_ticker: safeString(pos["BB Ticker"]),
      cr01: safeNumber(pos.CR01),
      dv01: safeNumber(pos.DV01),
      broker: safeString(pos.Broker),
      call_date: safeString(pos["Call Date"]),
      country: safeString(pos.Country),
      coupon_rate: safeNumber(pos["Coupon Rate"]),
      currency: safeString(pos.Currency),
      entry_price: pos["Entry Price"] || {},
      entry_yield: safeNumber(pos["Entry Yield"]),
      fx_rate: safeNumber(pos["FX Rate"]),
      fitch_bond_rating: safeString(pos["Fitch Bond Rating"]),
      fitch_outlook: safeString(pos["Fitch Outlook"]),
      interest: pos.Interest || {},
      issuer: safeString(pos.Issuer),
      last_price_update: pos["Last Price Update"],
      last_upload_trade: pos["Last Upload Trade"],
      maturity: safeString(pos.Maturity),
      moddys_outlook: safeString(pos["Moddy's Outlook"]),
      moodys_bond_rating: safeString(pos["Moody's Bond Rating"]),
      moodys_outlook: safeString(pos["Moody's Outlook"]),
      bbg_composite_rating: safeString(pos["BBG Composite Rating"]),
      sp_bond_rating: safeString(pos["S&P Bond Rating"]),
      sp_outlook: safeString(pos["S&P Outlook"]),
      oas: safeNumber(pos.OAS),
      original_face: safeNumber(pos["Original Face"]),
      sector: safeString(pos.Sector),
      strategy: safeString(pos.Strategy),
      ytm: safeNumber(pos.YTM),
      ytw: safeNumber(pos.YTW),
      z_spread: safeNumber(pos["Z Spread"]),
      notes: safeString(pos.Notes),
      coupon_duration: safeNumber(pos["Coupon Duration"]),
      asset_class: safeString(pos["Asset Class"]),
      pin: safeString(pos.Pin),
      issuers_country: safeString(pos["Issuer's Country"]),
      coupon_frequency: safeString(pos["Coupon Frequency"]),
      previous_settle_date: safeString(pos["Previous Settle Date"]),
      next_settle_date: safeString(pos["Next Settle Date"]),
      cost_mtd: pos["Cost MTD"] || {},
      security_description: safeString(pos["Security Description"]),
      type: pos["Type"],
    };
  });

  return newResult;
}

export function formatPositionsApp(positions: PositionInSQLDB[]): PositionInDB[] {
  let result: PositionInDB[] = positions.map((pos) => {
    return {
      portfolio_snapshot_time: pos.portfolio_snapshot_time,
      portfolio_id: pos.portfolio_id || "portfolio_main",
      id: pos.id,
      Type: pos.type,
      Location: pos.location,
      ISIN: pos.isin,
      CUSIP: pos.cusip,
      "Bloomberg ID": pos.bloomberg_id,
      Bid: pos.bid,
      Mid: pos.mid,
      Ask: pos.ask,
      "Bloomberg Mid BGN": pos.bloomberg_mid_bgn,
      "Notional Amount": pos.notional_amount,
      "Average Cost": pos.average_cost,
      "BB Ticker": pos.bb_ticker,
      CR01: pos.cr01,
      DV01: pos.dv01,
      Broker: pos.broker,
      "Call Date": pos.call_date,
      Country: pos.country,
      "Coupon Rate": pos.coupon_rate,
      Currency: pos.currency,
      "Entry Price": pos.entry_price,
      "Entry Yield": pos.entry_yield,
      "FX Rate": pos.fx_rate,
      "Fitch Bond Rating": pos.fitch_bond_rating,
      "Fitch Outlook": pos.fitch_outlook,
      Interest: pos.interest,
      Issuer: pos.issuer,
      "Last Price Update": pos.last_price_update,
      "Last Upload Trade": pos.last_upload_trade,
      Maturity: pos.maturity,
      "Moddy's Outlook": pos.moddys_outlook,
      "Moody's Bond Rating": pos.moodys_bond_rating,
      "Moody's Outlook": pos.moodys_outlook,
      "BBG Composite Rating": pos.bbg_composite_rating,
      "S&P Bond Rating": pos.sp_bond_rating,
      "S&P Outlook": pos.sp_outlook,
      OAS: pos.oas,
      "Original Face": pos.original_face,
      Sector: pos.sector,
      Strategy: pos.strategy,
      YTM: pos.ytm,
      YTW: pos.ytw,
      "Z Spread": pos.z_spread,
      Notes: pos.notes,
      "Coupon Duration": pos.coupon_duration,
      "Asset Class": pos.asset_class,
      Pin: pos.pin,
      "Issuer's Country": pos.issuers_country,
      "Coupon Frequency": pos.coupon_frequency,
      "Previous Settle Date": pos.previous_settle_date,
      "Next Settle Date": pos.next_settle_date,
      "Cost MTD": pos.cost_mtd,
      "Security Description": pos.security_description,
    };
  });
  return result;
}
