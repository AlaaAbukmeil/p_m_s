require("dotenv").config();

import { uploadToGCloudBucket } from "./portfolioFunctions";
import { readBBGBlot, readIB, readBBE } from "./mufgOperations";
import { getTradeDateYearTrades, getTradeDateYearTradesWithoutTheCentury, formatDateReadable, convertExcelDateToJSDate, convertExcelDateToJSDateTime, generateRandomString } from "./common";
import { getSettlementDateYear, readIBEblot, getDateTimeInMongoDBCollectionFormat, readEmsxEBlot } from "./portfolioFunctions";
import { formatDateVconFile } from "./common";
import { getSecurityInPortfolioWithoutLocation } from "./graphApiConnect";
import { formatTradeDate } from "./common";
import { rules } from "../models/rulesExcel";

const xlsx = require("xlsx");
const { PassThrough } = require("stream");
const { MongoClient, ServerApiVersion } = require("mongodb");

const uri = "mongodb+srv://alaa:" + process.env.MONGODBPASSWORD + "@atlascluster.zpfpywq.mongodb.net/?retryWrites=true&w=majority";
const axios = require("axios");
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: false,
    deprecationErrors: true,
  },
});

function extractValuesVcon(lines: any) {
  let variables = [
    "Broker Code",
    "Status",
    "Buy/Sell",
    "Quantity",
    "Issue",
    "Benchmark",
    "Price",
    "Yield",
    "Principal",
    "Trade Date",
    "Acc Int",
    "Settle Date",
    "Net",
    "Spread",
    "Entry Time",
    "Customer",
    "Seq No",
    "Account",
    "User Name",
    "Audit Trail",
    "Broker Name",
    "Accrued Interest",
    "Application",
    "Benchmark Discount",
    "Benchmark Price",
    "Benchmark Yield",
    "Client Side",
    "Currency Symbol",
    "Cusip",
    "Dealer Notes",
    "Dealer Pricing Number",
    "Discount Rate",
    "End Date",
    "Factor Label",
    "Futures client broker",
    "Futures dealer broker",
    "ISIN",
    "Price (Decimal)",
    "Primary Security ID",
    "Rate",
    "Swap Sequence Number",
    "Trading System Ticket #",
    "Transaction Cost",
    "Unit Traded",
  ];
  // Prepare the variable pattern, escape special characters
  const varPattern = variables.map((v: any) => v.trim().replace(/[.*+\?^{}()|[\]\\]/g, "\\&")).join("|");

  let values: any = {};

  lines.forEach((line: any) => {
    // Split the line into segments based on the variable names
    const segments = line.split(new RegExp(`(${varPattern})`));

    for (let i = 1; i < segments.length; i += 2) {
      let varName = segments[i].trim();
      let value = "";

      if (i + 1 < segments.length) {
        // Slice the value from the segment, remove leading ':'
        value = segments[i + 1].split(":")[1]?.trim() || "";
        // console.log(value)
      }
      // console.log(varName, value)

      values[varName] = value;
    }
  });

  return values;
}
function parseArray(arr: any) {
  let obj: any = {};
  for (let i = 0; i < arr.length; i++) {
    let splitString = arr[i].split(":");
    if (splitString.length === 2) {
      let key = splitString[0].trim();
      let value = splitString[1].trim();
      obj[key] = value;
    }
  }
  return obj;
}
export function renderVcon(emailContent: string) {
  const start = "Broker Code";
  const end = "** TICKET GENERATED BY BLOOMBERG **";

  // Find the start and end indices of the relevant content
  const startIndex = emailContent.indexOf(start);
  const endIndex = emailContent.indexOf(end) + end.length;

  // Extract the relevant content
  const relevantContent = emailContent.slice(startIndex, endIndex);

  let lines = relevantContent.split("\n");
  lines.pop();
  lines.pop();
  lines.pop();
  lines = lines.filter((line) => line !== "------------------------------------------------------------------------------");
  lines = lines.filter((line) => line !== "");

  let vcon: any = {};
  let main: any = lines.slice(0, 10);
  let secondary: any = lines.slice(11, -1);
  // console.log(secondary)

  let firstParams = extractValuesVcon(main);
  let secondParams = parseArray(secondary);
  vcon = { ...firstParams, ...secondParams };

  return vcon;
}

export async function uploadArrayAndReturnFilePath(data: any, pathName: string) {
  // Create a new Workbook
  var wb = xlsx.utils.book_new();

  let binaryWS = xlsx.utils.json_to_sheet(data);
  // Name your sheet
  xlsx.utils.book_append_sheet(wb, binaryWS, "Binary values");
  // export your excel
  const stream = new PassThrough();
  const buffer = xlsx.write(wb, { type: "buffer", bookType: "xlsx" });
  let randomString = generateRandomString(6);
  let fileName = `after-excel/${pathName}_${randomString}.xlsx`;

  uploadToGCloudBucket(buffer, process.env.BUCKET, fileName).then().catch(console.error);

  return fileName;
}

export async function getTriadaTrades(tradeType: any) {
  const database = client.db("trades_v_2");
  const reportCollection = await database.collection(`${tradeType}`).find().toArray();
  return reportCollection;
}

export async function formatCentralizedRawFiles(files: any) {
  let bbbData = [],
    ibData = [],
    bbeData = [];
  for (let fileIndex = 0; fileIndex < files.length; fileIndex++) {
    let file = files[fileIndex];
    if (file["fieldname"] == "BBB") {
      bbbData = await readBBGBlot(file["filename"]);
      if (bbbData.error) {
        return bbbData;
      }
    } else if (file["fieldname"] == "IB") {
      let url = "https://storage.googleapis.com/capital-trade-396911.appspot.com" + file["filename"];
      ibData = await readIBEblot(url);
      if (ibData.error) {
        return ibData;
      }
    } else if (file["fieldname"] == "BBE") {
      let url = "https://storage.googleapis.com/capital-trade-396911.appspot.com" + file["filename"];
      bbeData = await readEmsxEBlot(url);
      if (bbeData.error) {
        return bbeData;
      }
    }
  }
  let blot = [];
  let counter = 1;
  let bbbCurrency: any = {
    $: "USD",
    A$: "AUD",
    "€": "EUR",
    "£": "GBP",
    SGD: "SGD",
  };
  for (let index = 0; index < bbbData.length; index++) {
    let obj: any = {};
    let trade = bbbData[index];
    if (trade["Status"] == "Accepted") {
      let settlementDate = getSettlementDateYear(convertExcelDateToJSDate(trade["Trade Date"]), convertExcelDateToJSDate(trade["Settle Date"]));
      obj["B/S"] = trade["Buy/Sell"];
      obj["Issue"] = trade["Issue"];
      obj["Location"] = trade["Location"].trim();
      obj["Trade Date"] = getTradeDateYearTrades(convertExcelDateToJSDate(trade["Trade Date"]));
      obj["Trade Time"] = trade["Entry Time"].split(" ")[1] + ":00";
      obj["Settle Date"] = getTradeDateYearTrades(settlementDate);
      obj["Price"] = trade["Price (Decimal)"];
      obj["Notional Amount"] = parseFloat(trade["Quantity"].replace(/,/g, ""));
      obj["Settlement Amount"] = parseFloat(trade["Net"].replace(/,/g, ""));
      obj["Principal"] = parseFloat(trade["Principal"].replace(/,/g, ""));
      obj["Counter Party"] = trade["Broker Code"];
      obj["Triada Trade Id"] = trade["Triada Trade Id"];
      obj["Seq No"] = trade["Seq No"];
      obj["ISIN"] = trade["ISIN"];
      obj["Cuisp"] = trade["Cusip"];
      obj["Currency"] = bbbCurrency[trade["Currency Symbol"]];
      obj["Yield"] = trade["Yield"];
      obj["Accrued Interest"] = trade["Accrued Interest"];
      obj["Original Face"] = "1000";
      obj["Comm/Fee"] = "";
      obj["Trade Type"] = "vcon";
      obj["Trade App Status"] = trade["Trade App Status"];
      blot.push(obj);
      counter++;
    }
  }

  for (let index2 = 0; index2 < ibData.length; index2++) {
    let trade = ibData[index2];

    let obj: any = {};
    let originalFace: any = Math.abs(trade["Notional Value"] / trade["T Price"] / trade["Quantity"]);
    obj["B/S"] = parseFloat(trade["Quantity"]) > 0 ? "B" : "S";
    obj["Issue"] = trade["Symbol"];
    obj["Location"] = trade["Location"].trim();
    obj["Trade Date"] = trade["Trade Date"];
    obj["Trade Time"] = trade["Trade Date Time"];
    obj["Settle Date"] = trade["Trade Date"];
    obj["Price"] = trade["T Price"];
    obj["Notional Amount"] = Math.abs(parseFloat(trade["Quantity"])) * originalFace;
    obj["Settlement Amount"] = Math.abs(trade["Notional Value"]);
    obj["Principal"] = Math.abs(trade["T Price"] * trade["Quantity"] * originalFace);
    obj["Counter Party"] = "IB";
    obj["Triada Trade Id"] = trade["Triada Trade Id"];
    obj["Seq No"] = "";
    obj["ISIN"] = "";
    obj["Cuisp"] = "";
    obj["Currency"] = "USD";
    obj["Yield"] = "";
    obj["Accrued Interest"] = "";
    obj["Original Face"] = originalFace;
    obj["Comm/Fee"] = trade["Comm/Fee"];
    obj["Trade Type"] = "ib";
    obj["Trade App Status"] = trade["Trade App Status"];
    blot.push(obj);
    counter++;
  }

  for (let index3 = 0; index3 < bbeData.length; index3++) {
    let obj: any = {};
    let trade = bbeData[index3];

    obj["B/S"] = trade["Buy/Sell"] == "Sell" ? "S" : "B";
    obj["Issue"] = trade["Security"];
    obj["Location"] = trade["Location"].trim();
    obj["Trade Date"] = trade["Trade Date"];
    obj["Trade Time"] = "";
    obj["Settle Date"] = trade["Trade Date"];
    obj["Price"] = trade["Price"];
    obj["Notional Amount"] = parseFloat(trade["Quantity"]);
    obj["Settlement Amount"] = trade["Net"];
    obj["Principal"] = trade["Net"] * trade["Price"];
    obj["Counter Party"] = "EMSX";
    obj["Triada Trade Id"] = trade["Triada Trade Id"];
    obj["Seq No"] = "";
    obj["ISIN"] = "";
    obj["Cuisp"] = "";
    obj["Currency"] = "HKD";
    obj["Yield"] = "";
    obj["Accrued Interest"] = "";
    obj["Original Face"] = "1000";
    obj["Comm/Fee"] = "";
    obj["Trade Type"] = "emsx";
    obj["Trade App Status"] = trade["Trade App Status"];
    blot.push(obj);
    counter++;
  }

  return blot;
}
function extractValuesFx(text: any) {
  let lines = text.split("\n");
  let output: any = {};

  lines.forEach((line: any) => {
    let colonIndex = line.indexOf(":");
    let key, value;
    if (colonIndex !== -1) {
      key = line.slice(0, colonIndex).trim();
      value = line.slice(colonIndex + 1).trim();
      output[key] = value;
    }
  });
  output = formatFxTrades(output);
  return output;
}
export function formatIbTrades(data: any, ibTrades: any, portfolio: any) {
  if(data.error){
    return data
  }
  let trades = [];
  // console.log(ibTrades[ibTrades.length - 1], data[0], "test")
  try {
    let count = ibTrades.length + 1;

    for (let index = 0; index < data.length; index++) {
      let trade = data[index];
      let id;
      let object: any = {};
      if (trade["Header"] == "Data") {
        let tradeDate = convertExcelDateToJSDate(data[index]["Date/Time"]);
        let tradeDateTime = convertExcelDateToJSDateTime(data[index]["Date/Time"]);
        let trade_status = "new";
        trade["Trade Date"] = formatTradeDate(tradeDate);

        trade["Settle Date"] = formatTradeDate(tradeDate);
        trade["Symbol"] += " IB";

        let existingTrade = null;
        for (let ibIndex = 0; ibIndex < ibTrades.length; ibIndex++) {
          let ibTrade = ibTrades[ibIndex];
          if (trade["Symbol"] == ibTrade["Issue"] && trade["Trade Date"] == ibTrade["Trade Date"] && Math.abs(ibTrade["Settlement Amount"]) == Math.abs(trade["Notional Value"])) {
            existingTrade = ibTrade;
          }
        }
        let identifier = trade["Symbol"];
        let securityInPortfolioLocation = getSecurityInPortfolioWithoutLocation(portfolio, identifier);

        if (existingTrade) {
          id = existingTrade["Triada Trade Id"];
          trade_status = "uploaded_to_app";
        } else {
          id = `Triada-IB-${trade["Trade Date"]}-${count}`;
          count++;
        }
        object["Currency"] = trade["Currency"];
        object["Symbol"] = trade["Symbol"];
        object["Quantity"] = trade["Quantity"];
        object["T Price"] = trade["T. Price"];
        object["C Price"] = data[index]["C. Price"];
        object["Notional Value"] = trade["Notional Value"];
        object["Comm/Fee"] = trade["Comm/Fee"];
        object["Basis"] = trade["Basis"];
        object["Realized P/L"] = trade["Realized P/L"];
        object["MTM P/L"] = trade["MTM P/L"];
        object["Code"] = trade["Code"];
        object["Trade Date"] = trade["Trade Date"];
        object["Trade Date Time"] = tradeDateTime;
        object["Settle Date"] = trade["Settle Date"];
        object["Triada Trade Id"] = id;
        object["Location"] = securityInPortfolioLocation && securityInPortfolioLocation != "" ? securityInPortfolioLocation : trade["Location"];
        object["Trade App Status"] = trade_status;
        trades.push(object);
      }
    }
  } catch (error) {
    return { error: error };
  }
  return trades;
}
function formatFxTrades(object: any) {
  let titles = Object.keys(object);
  let formattedObject: any = {};
  for (let index = 0; index < titles.length; index++) {
    let title = titles[index];
    if (title == "Symbol") {
      let buyCurrency = object[title].split("/")[0];
      let sellCurrency = object[title].split("/")[1];
      formattedObject["Buy Currency"] = buyCurrency;
      formattedObject["Sell Currency"] = sellCurrency;
    } else if (title == "Timestamp") {
      formattedObject["Trade Date"] = formatDateReadable(object[title]);
    } else if (title == "Value Date") {
      formattedObject["Settle Date"] = formatDateReadable(object[title]);
    } else if (title == "Amount 1") {
      formattedObject["Buy Amount"] = parseFloat(object[title].split(" ")[1].replace(/,/g, ""));
    } else if (title == "Amount 2") {
      formattedObject["Sell Amount"] = parseFloat(object[title].split(" ")[1].replace(/,/g, ""));
    } else {
      formattedObject[title] = object[title];
    }
  }
  return formattedObject;
}
export function renderFx(emailContent: string) {
  const start = "User";
  const end = "This e-mail";

  // Find the start and end indices of the relevant content
  const startIndex = emailContent.indexOf(start);
  const endIndex = emailContent.indexOf(end) + end.length;

  // Extract the relevant content
  const relevantContent = emailContent.slice(startIndex, endIndex);

  let fxTrade: any = {};

  let firstParams = extractValuesFx(relevantContent);

  fxTrade = { ...firstParams };

  return fxTrade;
}

export function formatEmsxTrades(data: any, emsxTrades: any, portfolio: any) {
  if (data.error) {
    return data;
  }
  let trades = [];
  try {
    let count = emsxTrades.length + 1;

    for (let index = 0; index < data.length; index++) {
      let trade = data[index];
      let id;
      let object: any = {};

      let existingTrade: any = null;

      for (let emsxIndex = 0; emsxIndex < emsxTrades.length; emsxIndex++) {
        let emsxTrade = emsxTrades[emsxIndex];
        // net because previous trade counted quantity as fill quantity
        let tradeType = trade["Side"] == "Sell" ? "S" : "B";
        if (formatTradeDate(convertExcelDateToJSDate(trade["Create Time (As of)"])) == emsxTrade["Trade Date"] && trade["Security"] == emsxTrade["Issue"] && tradeType == emsxTrade["B/S"] && (trade["FillQty"] == emsxTrade["Notional Amount"])) {
          existingTrade = emsxTrade;
        }else if (formatTradeDate(convertExcelDateToJSDate(trade["Create Time (As of)"])) == emsxTrade["Trade Date"]){
          console.log( trade["Security"] ,emsxTrade["Security"], tradeType , emsxTrade["B/S"] , (trade["FillQty"] , emsxTrade["Notional Amount"]))
        }
      }
      let tradeDate = convertExcelDateToJSDate(data[index]["Create Time (As of)"]);
      trade["Trade Date"] = formatTradeDate(tradeDate);
      trade["Trade Date Time"] = trade["Settle Date"] = formatTradeDate(tradeDate);
      let identifier = trade["Security"];
      let securityInPortfolioLocation = getSecurityInPortfolioWithoutLocation(portfolio, identifier);
      let trade_status = "new";
      if (existingTrade) {
        id = existingTrade["Triada Trade Id"];
        trade_status = "uploaded_to_app";
      } else {
        id = `Triada-EMSX-${trade["Trade Date"]}-${count}`;
        count++;
      }
      object["Status"] = trade["Status"];
      object["Buy/Sell"] = trade["Side"];
      object["Security"] = trade["Security"];
      object["Quantity"] = trade["Qty"];
      object["Net"] = trade["FillQty"];
      object["Price"] = trade["LmtPr"];
      object["Trade Date"] = trade["Trade Date"];
      object["Settle Date"] = trade["Settle Date"];
      object["Triada Trade Id"] = id;
      object["Location"] = securityInPortfolioLocation;
      object["Trade App Status"] = trade_status;
      trades.push(object);
    }
  } catch (error) {
    return { error: error };
  }
  return trades;
}
export async function readEmsxRawExcel(path: string) {
  try {
    const response = await axios.get(path, { responseType: "arraybuffer" });

    /* Parse the data */
    const workbook = xlsx.read(response.data, { type: "buffer" });

    /* Get first worksheet */
    const worksheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[worksheetName];

    /* Convert worksheet to JSON */
    // const jsonData = xlsx.utils.sheet_to_json(worksheet, { defval: ''});

    // Read data

    const headers = xlsx.utils.sheet_to_json(worksheet, { header: 1 });
    const headersFormat = ["News", "Create Time (As of)", "Status", "Security", "Side", "Qty", "LmtPr", "TIF", "FillQty", "AvgPr", "% Filled", "Working Qty", "Idle", "Data Export Restricted", "Data Export Restricted", "VWAP", "Data Export Restricted", "Last", "Bid", "Ask", "Volume", "%20d ADV"];
    const arraysAreEqual = headersFormat.every((value, index) => (value === headers[0][index + 2] ? true : console.log(value, headers[0][index + 2])));
    if (!arraysAreEqual) {
      return {
        error: "Incompatible format, please upload emsx e-blot xlsx/csv file",
      };
    } else {
      let data = xlsx.utils.sheet_to_json(worksheet, {
        defval: "",
        range: "D1:X300",
      });

      return data;
    }
  } catch (error) {
    return { error: error };
  }
}
export function formatVconToNomuraBulkUpload(data: any) {}
